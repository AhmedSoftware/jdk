package jdk.test.foo;import java.io.IOException;import java.net.URI;import java.nio.channels.SeekableByteChannel;import java.nio.file.*;import java.nio.file.attribute.BasicFileAttributes;import java.nio.file.attribute.FileAttribute;import java.nio.file.attribute.FileAttributeView;import java.nio.file.spi.FileSystemProvider;import java.util.Map;import java.util.Set;public class NoOpFSProvider extends FileSystemProvider {    private final FileSystemProvider fileSystemProvider;    public NoOpFSProvider(FileSystemProvider fileSystemProvider) {        this.fileSystemProvider = fileSystemProvider;    }    @Override    public String getScheme() {        return fileSystemProvider.getScheme();    }    @Override    public FileSystem newFileSystem(URI uri, Map<String, ?> env) throws IOException {        return fileSystemProvider.newFileSystem(uri, env);    }    @Override    public FileSystem getFileSystem(URI uri) {        return fileSystemProvider.getFileSystem(uri);    }    @Override    public Path getPath(URI uri) {        return fileSystemProvider.getPath(uri);    }    @Override    public SeekableByteChannel newByteChannel(Path path, Set<? extends OpenOption> options, FileAttribute<?>... attrs) throws IOException {        return fileSystemProvider.newByteChannel(path, options, attrs);    }    @Override    public DirectoryStream<Path> newDirectoryStream(Path dir, DirectoryStream.Filter<? super Path> filter) throws IOException {        return fileSystemProvider.newDirectoryStream(dir, filter);    }    @Override    public void createDirectory(Path dir, FileAttribute<?>... attrs) throws IOException {        fileSystemProvider.createDirectory(dir, attrs);    }    @Override    public void delete(Path path) throws IOException {        fileSystemProvider.delete(path);    }    @Override    public void copy(Path source, Path target, CopyOption... options) throws IOException {        fileSystemProvider.copy(source, target, options);    }    @Override    public void move(Path source, Path target, CopyOption... options) throws IOException {        fileSystemProvider.move(source, target, options);    }    @Override    public boolean isSameFile(Path path, Path path2) throws IOException {        return fileSystemProvider.isSameFile(path, path2);    }    @Override    public boolean isHidden(Path path) throws IOException {        return fileSystemProvider.isHidden(path);    }    @Override    public FileStore getFileStore(Path path) throws IOException {        return fileSystemProvider.getFileStore(path);    }    @Override    public void checkAccess(Path path, AccessMode... modes) throws IOException {        fileSystemProvider.checkAccess(path, modes);    }    @Override    public <V extends FileAttributeView> V getFileAttributeView(Path path, Class<V> type, LinkOption... options) {        return fileSystemProvider.getFileAttributeView(path, type, options);    }    @Override    public <A extends BasicFileAttributes> A readAttributes(Path path, Class<A> type, LinkOption... options) throws IOException {        return fileSystemProvider.readAttributes(path, type, options);    }    @Override    public Map<String, Object> readAttributes(Path path, String attributes, LinkOption... options) throws IOException {        return fileSystemProvider.readAttributes(path, attributes, options);    }    @Override    public void setAttribute(Path path, String attribute, Object value, LinkOption... options) throws IOException {        fileSystemProvider.setAttribute(path, attribute, value, options);    }}